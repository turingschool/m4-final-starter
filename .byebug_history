continue
@links.find_all {|elem| elem.first > }.length
@links.find_all {|elem| elem.first > 2 }.length
@links.find_all {|elem| elem.first > 1 }.length
@links.find_all {|elem| elem.first > 1 }
@links.find_all {|elem| elem.first > 0 }
@links.find_all {|elem| elem > 0 }
@links
exit
@links
@links.find_all {|elem| elem > 0 }
exit
current_user.links.where(url: "a")
@links.where(url: "a")
@links.find_all {|elem| elem.first == 0 }
@links.find_all {|elem| elem.first > 0 }
exit
top_link
link
exit
@links.find_all {|elem| elem.first > 0 }
@links
exit
@links.find_all {|elem| elem.first > 0 }
continue
@links.find_all {|elem| elem.first > 0 }
@links.find_all {|elem| elem.first == 0 }
@links.find_all {|elem| elem.first > 0 }
@links.filter {|elem| elem.first > 0 }
@links
exit
@links
exit
qe
current_user.links.map {|link| qe << link}
qe = []
qe
current_user.links.map {|link| qe = link}
q
current_user.links.map {|link| q = link}
current_user.links
current_user.links.map {|link|link}
current_user.links
current_user
continue
exit
@links
exit
current_user.links
current_user.links.map { |link|   return [2, link] if link == top_link;return [1, link] if hot_links.include?(link);return [0, link]; end;
current_user.links.map { |link|   return [2, link] if link == top_link;return [1, link] if hot_links.include?(link);return [0, link]; end
    end
      return [0, link]
      return [1, link] if hot_links.include?(link)
      return [2, link] if link == top_link
links = current_user.reload.links.map do |link|
    end
      return [0, link]
      return [1, link] if hot_links.include?(link)
      return [2, link] if link == top_link
links = current_user.reload.links.map do |link|
    top_link = hot_links.shift
hot_links = Link.get_top_10
Link.where(read: true).group(:url).count.sort_by {|k, v| -v}.to_h
where(read: true).group(:url).count.sort_by {|k, v| -v}.to_h
Link.get_top_10
current_user.reload.links
current_user.links
Link.top_links_for(current_user)
@links
next
continue
@links
link
continue
[]
current_user.links
@links
continue
rspec
continue
exit
group(:url).count.sort_by {|k, v| -v}[0,10].first.first
group(:url).count.sort_by {|k, v| -v}[0,10]
next
group(:url).count.sort_by {|k, v| -v}[0,10]
exit
 group(:url).count.sort_by {|k, v| -v}[-11...-1]
 group(:url).count.sort_by {|k, v| v}[-11...-1]
group(:url).count.sort_by {|k, -v| v}[0, 9]
 group(:url).count.sort_by {|k, v| v}[-11...-1]
 group(:url).count.sort_by {|k, v| v}[-1...-3]
 group(:url).count.sort_by {|k, v| v}[-1...-2]
 group(:url).count.sort_by {|k, v| v}[-1..-2]
 group(:url).count.sort_by {|k, v| v}[-1, -2]
 group(:url).count.sort_by {|k, v| v}[-1, -11]
 group(:url).count.sort_by {|k, v| v}[-1]
 group(:url).count.sort_by {|k, v| v}[-11,-1]
group(:url).count
group(:url).count.sort_by {|k, v| v}[0,10]
continue
group(:url).count.sort_by {|k, v| v}[0,10]
next
group(:url).count.sort_by {|k, v| v}[0,10]
continue
exit
group(:url).count
exit
group(:url).count
continue
link
continue
Link.all
Link.count(:url)
Link.group(:url).count(:url)
Link.group(url).count()
Link.group(:url).count
Link.group(:url).count()
Link.group(:url).to_json
Link.group(:url).to_s
Link.group(:url).to_S
Link.group(:url).to_a
Link.group(:url)
Link.group(:url).count(:url)
Link.group(:url).count
Link.group(:url)
Link.count
Link.where(url: "https://www.google1.com")
Link.all
continue
exit
Link.all
ec
exit
continue
exit
link.update_attributes(link_params)
link_params
exit
params
link_params
exiy
exit
params["read"]
params
read
